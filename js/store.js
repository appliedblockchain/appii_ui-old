// Generated by CoffeeScript 1.10.0
var Orgs, Store, StoreData, Unis, Users, genAvatars, identicon;

Users = [
  {
    id: 1,
    name: "Stephanie Curry",
    avatar: "http://api.randomuser.me/portraits/thumb/women/0.jpg",
    avatarLg: "http://api.randomuser.me/portraits/med/women/0.jpg",
    jobTitle: "Software Developer"
  }, {
    id: 2,
    name: "Klay Thompson",
    avatar: "http://api.randomuser.me/portraits/thumb/men/3.jpg",
    avatarLg: "http://api.randomuser.me/portraits/med/men/3.jpg",
    jobTitle: "Graphic Designer"
  }, {
    id: 3,
    name: "Catherine Thompson",
    avatar: "http://api.randomuser.me/portraits/thumb/women/2.jpg",
    avatarLg: "http://api.randomuser.me/portraits/med/women/2.jpg",
    jobTitle: "Engineer"
  }, {
    id: 4,
    name: "Garret Albert",
    avatar: "http://api.randomuser.me/portraits/thumb/men/1.jpg",
    avatarLg: "http://api.randomuser.me/portraits/med/men/1.jpg",
    jobTitle: "Mathematician"
  }, {
    id: 5,
    name: "Carla Farad",
    avatar: "http://api.randomuser.me/portraits/thumb/women/4.jpg",
    avatarLg: "http://api.randomuser.me/portraits/med/women/4.jpg",
    jobTitle: "Biologist"
  }
];

Orgs = [
  {
    id: 1,
    name: "test11111",
    employees: 1
  }, {
    id: 2,
    name: "test2",
    employees: 3
  }
];

Orgs = _(Orgs).map((function(_this) {
  return function(entity) {
    return new Org(entity);
  };
})(this));

identicon = function(entity, size) {
  var icon, id, sizePx;
  sizePx = 80;
  if (size === "large") {
    sizePx = 150;
  }
  id = md5(entity.id.toString());
  icon = new Identicon(id, sizePx).toString();
  return "data:image/png;base64," + icon;
};

genAvatars = function(entities) {
  return _(entities).map(function(entity) {
    entity.avatar = identicon(entity);
    entity.avatarLg = identicon(entity, "large");
    return entity;
  });
};

Orgs = genAvatars(Orgs);

Unis = [];

StoreData = {
  users: Users,
  orgs: Orgs,
  unis: Unis
};

Store = function() {
  this.update = function(StoreData) {
    return this.trigger('update', StoreData);
  };
  riot.observable(this);
  setTimeout((function(_this) {
    return function() {
      return _this.update(StoreData);
    };
  })(this), 0);
  Org.all().then((function(_this) {
    return function(orgs) {
      StoreData.orgs = orgs;
      return _this.update(StoreData);
    };
  })(this))["catch"](function(error) {
    return c.error("Error: " + error);
  });
  return this;
};
